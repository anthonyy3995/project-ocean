[{"/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/index.js":"1","/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/App.js":"2","/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/reportWebVitals.js":"3","/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/Layers/Sunlight.js":"4","/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/Layers/Twilight.js":"5","/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/Layers/Abyss.js":"6","/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/Layers/Midnight.js":"7","/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/Layers/Trench.js":"8","/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/Layers/Title.js":"9","/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/Hooks/UseOnScreen.js":"10","/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/Pages/Resources.js":"11","/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/Pages/Main.js":"12"},{"size":611,"mtime":1611298438031,"results":"13","hashOfConfig":"14"},{"size":369,"mtime":1611296425020,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1610824057641,"results":"16","hashOfConfig":"14"},{"size":2368,"mtime":1611275273977,"results":"17","hashOfConfig":"14"},{"size":3142,"mtime":1611275228702,"results":"18","hashOfConfig":"14"},{"size":2474,"mtime":1611275291187,"results":"19","hashOfConfig":"14"},{"size":2663,"mtime":1610932623129,"results":"20","hashOfConfig":"14"},{"size":2449,"mtime":1611275241198,"results":"21","hashOfConfig":"14"},{"size":1538,"mtime":1611275259229,"results":"22","hashOfConfig":"14"},{"size":755,"mtime":1610863548858,"results":"23","hashOfConfig":"14"},{"size":2910,"mtime":1611296469533,"results":"24","hashOfConfig":"14"},{"size":3839,"mtime":1611275197392,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"13uzeva",{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"31"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"31"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"31"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"31"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"31"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"31"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"31"},"/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/index.js",["61","62"],"/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/App.js",["63","64"],"import React from 'react';\nimport {useRoutes, BrowserRouter, Route} from 'react-router-dom'\nimport Main from './Pages/Main.js'\nimport Resources from './Pages/Resources.js'\n\nfunction App() {\n\n  const routes = [\n\t\t{\n\t\t\tpath: \"/\",\n\t\t\telement: <Main />,\n\t\t},\n\t\t{\n\t\t\tpath: \"/resources\",\n\t\t\telement: <Resources />,\n\t\t},\n\t];\n\n\treturn useRoutes(routes);\n}\n\nexport default App;\n",["65","66"],"/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/reportWebVitals.js",[],"/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/Layers/Sunlight.js",[],"/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/Layers/Twilight.js",["67"],"import React, {useState} from 'react';\nimport Typist from 'react-typist';\nimport './../Styles/Twilight.css';\nimport Fish from './../all-images/fish copy.png';\nimport Squid from './../all-images/squid copy.png';\nimport Shark from './../all-images/sharkFINAL.png'\nimport Microplastic from './../all-images/microplastic.png';\nimport bubbleOne from './../all-images/bubblesOne.png'\n\nfunction Twilight(props){\n    \n    const [showFishBubble, setShowFishBubble] = useState(false);\n    const [showSquidBubble, setShowSquidBubble] = useState(false);\n    const [showSharkBubble, setShowSharkBubble] = useState(false);\n    \n    return(\n        <div className ='Twilight'>\n            <Typist cursor={{show:false, hideWhenDone:true}}>\n                <h1 className='twilightTitle'>Twilight Layer</h1>\n            </Typist>\n            <img src={bubbleOne} className='bubblesOne'/>\n            <div id='fish' className='fishContainer'>\n                <img alt='' src={Fish} className='fishImage' \n                    // listeners\n                    onMouseEnter={() => setShowFishBubble(true)}\n                    onMouseLeave={() => setShowFishBubble(false)}\n                />\n                {showFishBubble ? \n                    // if true\n                    <h2 className='fishLabel'>\n                        1 out of every 4 fish at markets in California contained plastic in their guts.\n                    </h2>:\n                    // if false\n                    <h1>\n                        {/* emptiness */}\n                    </h1>\n                }\n                \n            </div>\n\n            <div id='squid' className='squidContainer'>\n                <img alt='' src={Squid} className='squidImage' \n                    // listeners\n                    onMouseEnter={() => setShowSquidBubble(true)}\n                    onMouseLeave={() => setShowSquidBubble(false)}\n                />\n                {showSquidBubble ? \n                    // if true\n                    <h2 className='squidLabel'>\n                        It is estimated that there will be more plastic in our oceans than fish by the year 2050.\n                    </h2>:\n                    // if false\n                    <h1>\n                        {/* emptiness */}\n                    </h1>\n                }\n\n            </div>\n\n            <div id='shark' className='sharkContainer'>\n                <img alt='' src={Shark} className='sharkImage' \n                    // listeners\n                    onMouseEnter={() => setShowSharkBubble(true)}\n                    onMouseLeave={() => setShowSharkBubble(false)}\n                />\n                {showSharkBubble ? \n                    // if true\n                    <h2 className='sharkLabel'>\n                        It takes the ocean 450 years to break down the plastic bottle.\n                    </h2>:\n                    // if false\n                    <h1>\n                        {/* emptiness */}\n                    </h1>\n                }\n            </div>\n            <img alt='' src={Microplastic} className='microplasticImage'/> \n        </div>\n    )\n    \n\n}\nexport default Twilight","/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/Layers/Abyss.js",["68","69"],"import React, {useState} from 'react';\nimport Typist from 'react-typist';\nimport './../Styles/Abyss.css';\nimport Jellyfish from './../all-images/jellyfish copy.png';\nimport Starfish from './../all-images/starfish.png';\nimport Bottle from './../all-images/plastic-bottle.png';\nimport Microplastic from './../all-images/microplastic.png';\n\nfunction Abyss(props){\n\n    const [showJellyfishBubble, setShowJellyfishBubble] = useState(false);    \n    const [showStarfishBubble, setShowStarfishBubble] = useState(false);    \n    const [showBottleBubble, setShowBottleBubble] = useState(false);    \n\n    return(\n        <div className ='Abyss'>\n            <Typist cursor={{show:false, hideWhenDone:true}} >\n                <h1 className='abyssTitle'>Abyss Layer</h1>\n            </Typist>\n        <img alt='' src={Bottle} className='bottleImage2'/>\n        <div id='jellyfish' className='jellyfishContainer'>\n            <img alt='' src={Jellyfish} className='jellyfishImage' \n                // listeners\n                onMouseEnter={() => setShowJellyfishBubble(true)}\n                onMouseLeave={() => setShowJellyfishBubble(false)}\n            />\n            {showJellyfishBubble ? \n                // if true\n                <h2 className='jellyfishLabel'>\n                    Noise pollution generated by shipping and military activity can cause cellular damage to a class of invertebrates that includes jellyfish and anemones.\n                </h2>:\n                // if false\n                <h1>\n                    {/* emptiness */}\n                </h1>\n            }\n        </div>\n        <img alt='' src={Bottle} className='bottleImage'/>\n        <div id='starfish' className='starfishContainer'>\n            <img alt='' src={Starfish} className='starfishImage' \n                // listeners\n                onMouseEnter={() => setShowStarfishBubble(true)}\n                onMouseLeave={() => setShowStarfishBubble(false)}\n            />\n            {showStarfishBubble ? \n                // if true\n                <h2 className='starfishLabel'>\n                    The deepest place on Earth (6.8 miles to a point in the Mariana Trench) was discovered to host trash. \n                </h2>:\n                // if false\n                <h1>\n                    {/* emptiness */}\n                </h1>\n            }\n        </div>\n        <img alt='' src={Microplastic} className='microplasticAbyss'/>\n    </div>\n    )\n                \n    \n}\nexport default Abyss","/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/Layers/Midnight.js",["70"],"import React, {useState} from 'react';\nimport Typist from 'react-typist';\nimport './../Styles/Midnight.css';\nimport Angler from './../all-images/anglerfish copy.png';\nimport Whale from './../all-images/whale.png'\nimport Microplastic from './../all-images/microplastic.png';\nimport bubblesTwo from './../all-images/bubbles2.png';\nimport PlasticBag from './../all-images/plastic-bag-FINAL.png';\n\nfunction Midnight(props){\n\n    const [showAnglerBubble, setShowAnglerBubble] = useState(false);\n    const [showWhaleBubble, setShowWhaleBubble] = useState(false);\n\n    return(\n        <div className ='Midnight'>\n            {/* {props.visible ? <Typist>\n                <h1 className='midnightTitle'>Midnight Layer</h1>\n            </Typist> : ''} */}\n            <Typist cursor={{show:false, hideWhenDone:true}}>\n                <h1 className='midnightTitle'>Midnight Layer</h1>\n            </Typist>\n            \n            <img alt='' src={PlasticBag} className='plasticBagImage'/>\n            <div id='angler' className='anglerContainer'>\n                <img alt='' src={Angler} className='anglerImage' \n                    // listeners\n                    onMouseEnter={() => setShowAnglerBubble(true)}\n                    onMouseLeave={() => setShowAnglerBubble(false)}\n                />\n                {showAnglerBubble ? \n                    // if true\n                    <h2 className='anglerLabel'>\n                        Plastic bags have an average usage of 12 minutes and lifespan of 500+ years.\n                    </h2>:\n                    // if false\n                    <h1>\n                        {/* emptiness */}\n                    </h1>\n                } \n            </div>\n            <img alt='' src={Microplastic} className='microplasticImage2'/> \n            <div id='whale' className='whaleContainer'>\n                <img alt='' src={Whale} className='whaleImage' \n                    // listeners\n                    onMouseEnter={() => setShowWhaleBubble(true)}\n                    onMouseLeave={() => setShowWhaleBubble(false)}\n                />\n                {showWhaleBubble ? \n                    // if true\n                    <h2 className='whaleLabel'>\n                        Every year, 100,000 marine animals are killed by plastic bags.\n                    </h2>:\n                    // if false\n                    <h1>\n                        {/* emptiness */}\n                    </h1>\n                } \n            </div>\n            <img src={bubblesTwo} className='bubblesTwo'/>\n            <img alt='' src={Microplastic} className='microplasticImage3'/>\n        </div>\n        \n    )\n}\nexport default Midnight","/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/Layers/Trench.js",["71"],"import React, {useState} from 'react';\nimport Typist from 'react-typist';\nimport './../Styles/Trench.css';\nimport Shrimp from './../all-images/shrimp copy.png';\nimport Crab from './../all-images/crab.png';\nimport Floor from './../all-images/trenchBottom.png'\nimport Microplastic from './../all-images/microplastic.png';\n\n\nfunction Trench(props){\n    \n    const [showShrimpBubble, setShowShrimpBubble] = useState(false);\n    const [showCrabBubble, setShowCrabBubble] = useState(false);\n\n    return(\n        <div className ='Trench'>\n            {/* {props.visible ? <Typist>\n                <h1 className='trenchTitle'>Trench Layer</h1>\n            </Typist> : ''} */}\n\n            <Typist cursor={{show:false, hideWhenDone:true}}>\n                <h1 className='trenchTitle'>Trench Layer</h1>\n            </Typist>\n            \n            <div id='shrimp' className='shrimpContainer'>\n                <img alt='' src={Shrimp} className='shrimpImage' \n                    // listeners\n                    onMouseEnter={() => setShowShrimpBubble(true)}\n                    onMouseLeave={() => setShowShrimpBubble(false)}\n                />\n                {showShrimpBubble ? \n                    // if true\n                    <h2 className='shrimpLabel'>\n                        Not one square mile of surface ocean anywhere on this planet is free of plastic pollution.\n                    </h2>:\n                    // if false\n                    <h1>\n                        {/* emptiness */}\n                    </h1>\n                }\n                \n            </div>\n\n            <div id='crab' className='crabContainer'>\n                <img alt='' src={Crab} className='crabImage' \n                    // listeners\n                    onMouseEnter={() => setShowCrabBubble(true)}\n                    onMouseLeave={() => setShowCrabBubble(false)}\n                />\n                {showCrabBubble ? \n                    // if true\n                    <h2 className='crabLabel'>\n                        70 percent of ocean garbage actually sinks to the seafloor, meaning we’re unlikely to ever be able to clean it up.\n                    </h2>:\n                    // if false\n                    <h1>\n                        {/* emptiness */}\n                    </h1>\n                }\n            </div>\n            <img alt='' src={Microplastic} className='microplasticTrench'/>\n        </div>\n        \n    )\n}\nexport default Trench","/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/Layers/Title.js",["72"],"import React, {useState} from 'react'\nimport {Link} from 'react-scroll';\nimport './../Styles/Title.css';\nimport Boat from './../all-images/fishing-boat.png';\nimport DownArrow from './../all-images/thin-arrowheads-pointing-down.png';\n\n\nfunction Title(){\n    \n    const [showBoatBubble, setShowBoatBubble] = useState(false);\n    \n    return(\n        <div className ='title'>\n            <p>-</p>\n            <div className='resourcesButton'>\n                <a className='resourcesLink' href='/resources'>\n                    Resources\n                </a>\n            </div>\n            <div className='downArrowContainer'>\n                <Link  to='sunlight' spy={true} smooth={true} duration={500} >\n                    <img className='downArrow' src={DownArrow}/>\n                </Link>\n            </div>\n            <div id='boat' className='boatContainer'>\n                <img alt='' src={Boat} className='boatImage' \n                    // listeners\n                    onMouseEnter={() => setShowBoatBubble(true)}\n                    onMouseLeave={() => setShowBoatBubble(false)}\n                />\n                {showBoatBubble ? \n                    // if true\n                    <h2 className='boatLabel'>\n                        Of all plastics, fishing line takes the longest to biodegrade, taking up to 600 years.\n                    </h2>:\n                    // if false\n                    <h1>\n                    </h1>\n                }\n            </div>\n        </div>\n        \n    )\n    \n\n}\nexport default Title","/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/Hooks/UseOnScreen.js",["73","74","75","76","77"],"import React, {useState, useEffect, useRef} from 'react';\n\nfunction useOnScreen(ref, rootMargin = '0px') {\n    // State and setter for storing whether element is visible\n    const [isIntersecting, setIntersecting] = useState(false);\n  \n    useEffect(() => {\n      const observer = new IntersectionObserver(\n        ([entry]) => {\n          // Update our state when observer callback fires\n          setIntersecting(entry.isIntersecting);\n        },\n        {\n          rootMargin\n        }\n      );\n      if (ref.current) {\n        observer.observe(ref.current);\n      }\n      return () => {\n        observer.unobserve(ref.current);\n      };\n    }, []); // Empty array ensures that effect is only run on mount and unmount\n  \n    return isIntersecting;\n  }",["78","79"],"/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/Pages/Resources.js",["80"],"import React, {useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport './../Styles/Resources.css'\nimport BackArrow from './../all-images/back-arrow.png';\n\nfunction Resources(){\n\n    const sevenActionsLink = 'https://www.oceanicsociety.org/blog/1720/7-ways-to-reduce-ocean-plastic-pollution-today'\n    const beachCleanUp = \"https://www.volunteercleanup.org/find?email_address=&address_change%5Bdistance%5D=25&address_change%5Bsubmitted_address%5D=33326&commit=Search\"\n    const donationLinks = \"https://donate.oceanconservancy.org/page/27503/donate/1?ea.tracking.id=20HPXWJAXX&gclid=Cj0KCQiA3Y-ABhCnARIsAKYDH7teV_QJ4sWZrbEF-W4W5fRKWNn2ZxJMjXeIwcpnEfhn_W-_0OYkD9gaAnTZEALw_wcB\"\n    const petitionLinks = \"https://www.change.org/p/california-state-senate-pass-the-plastic-pollution-reduction-act\"\n\n    const [showBubbleOne, setShowBubbleOne] = useState(false);\n    const [showBubbleTwo, setShowBubbleTwo] = useState(false);\n    const [showBubbleThree, setShowBubbleThree] = useState(false);\n    const [showBubbleFour, setShowBubbleFour] = useState(false);\n\n    return(\n        <div className='container'>\n            <div className='backContainer'>\n                <Link to='/'>\n                    <img className='back' src={BackArrow}/>\n                </Link>\n            </div>\n            <h1 className= 'Title'>Resources</h1>\n            <div className='bubbleContainer'>\n                <div className='bubbleOne' onClick={()=>window.open(sevenActionsLink) }\n                    onMouseEnter={() => setShowBubbleOne(true)}\n                    onMouseLeave={() => setShowBubbleOne(false)}>\n                    {\n                        showBubbleOne ? 'CLICK HERE': \"Help Reduce Pollution\"\n                    }\n\n                </div>\n                <div className='bubbleTwo' onClick={()=>window.open(beachCleanUp) }\n                    onMouseEnter={() => setShowBubbleTwo(true)}\n                    onMouseLeave={() => setShowBubbleTwo(false)}>\n                    {\n                        showBubbleTwo ? 'GO HERE': 'Clean Local Beaches'\n                    }\n                </div>\n                <div className='bubbleThree' onClick={()=>window.open(donationLinks) }\n                    onMouseEnter={() => setShowBubbleThree(true)}\n                    onMouseLeave={() => setShowBubbleThree(false)}>\n                    {\n                        showBubbleThree ? 'DONATE HERE' : 'Support Ocean Wildlife'\n                    }\n\n                </div>\n                <div className='bubbleFour' onClick={()=>window.open(petitionLinks) }\n                    onMouseEnter={() => setShowBubbleFour(true)}\n                    onMouseLeave={() => setShowBubbleFour(false)}>\n                    {\n                        showBubbleFour ? 'SIGN HERE': 'Make Your Voice Heard'\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default Resources;","/Users/anthonyyan/Desktop/HackDavis/project-ocean/src/Pages/Main.js",["81","82","83"],"import React, {useRef, useState, useEffect} from 'react';\nimport Title from './../Layers/Title.js'\nimport Sunlight from './../Layers/Sunlight.js'\nimport Twilight from './../Layers/Twilight.js'\nimport Midnight from './../Layers/Midnight.js'\nimport Abyss from './../Layers/Abyss.js'\nimport Trench from './../Layers/Trench.js'\n// import useOnScreen from './../Hooks/UseOnScreen.js';\nimport './../Styles/Main.css';\nimport './../Styles/Nav.css';\nimport UpArrow from './../all-images/arrow-up.png';\n\nfunction useOnScreen(ref, rootMargin = '0px') {\n    // State and setter for storing whether element is visible\n    const [isIntersecting, setIntersecting] = useState(false);\n  \n    useEffect(() => {\n      const observer = new IntersectionObserver(\n        ([entry]) => {\n          // Update our state when observer callback fires\n          setIntersecting(entry.isIntersecting);\n        },\n        {\n          rootMargin\n        }\n      );\n      if (ref.current) {\n        observer.observe(ref.current);\n      }\n    //   changes from return ()=>{}\n    //  https://stackoverflow.com/questions/45514676/react-check-if-element-is-visible-in-dom\n      else {\n        observer.unobserve(ref.current);\n      };\n    }, []); // Empty array ensures that effect is only run on mount and unmount\n  \n    return isIntersecting;\n  }\n\nfunction Main(){\n  // instantiate refs\n  const titleRef = useRef(null)\n  const sunlightRef = useRef(null)\n  const twilightRef = useRef(null)\n  const midnightRef = useRef(null)\n  const abyssRef = useRef(null)\n  const trenchRef = useRef(null)\n\n  //instantiate useonescreen refs\n    const titleVisible = useOnScreen(titleRef, '-300px');\n    const sunlightVisible = useOnScreen(sunlightRef, '-300px');\n    const twilightVisible = useOnScreen(twilightRef, '-300px');\n    const midnightVisible = useOnScreen(midnightRef, '-300px');\n    const abyssVisible = useOnScreen(abyssRef, '-300px');\n    const trenchVisible = useOnScreen(trenchRef, '-300px');\n \n  const NavBar = () => {\n    return(\n      <div className='navContainer'> \n        <button \n          className={`navButton ${sunlightVisible ? \"active\" : \"\"}`}\n          onClick={()=> executeScroll(sunlightRef)}\n        >\n            Sunlight\n          \n        </button>\n        <button \n          className={`navButton ${twilightVisible ? \"active\" : \"\"}`}\n          onClick={()=> executeScroll(twilightRef)}\n        >\n          Twilight\n        </button>\n        <button \n          className={`navButton ${midnightVisible ? \"active\" : \"\"}`}\n          onClick={()=>executeScroll(midnightRef)}\n        >\n          Midnight\n        </button>\n        <button \n          className={`navButton ${abyssVisible ? \"active\" : \"\"}`}\n          onClick={()=>executeScroll(abyssRef)}\n        >\n          Abyss\n        </button>\n        <button \n          className={`navButton ${trenchVisible ? \"active\" : \"\"}`}\n          onClick={()=>executeScroll(trenchRef)}\n        >\n          Trench\n        </button>\n      </div>\n    )\n  }\n\n  const executeScroll = (id) => id.current.scrollIntoView({\n    behavior: 'smooth'\n  });\n  return (\n    <div className='App'>\n\n      <NavBar/>\n      \n      <div className='layers'> \n        <div className='light'>\n        \n          <div ref={titleRef}>\n              <Title/>\n            </div>\n            <div id='sunlight' ref={sunlightRef}>\n              <Sunlight />\n            </div>\n        </div>\n        <div className='dark'>\n          <div ref={twilightRef}><Twilight /></div>\n          <div ref={midnightRef}><Midnight /></div>\n          <div ref={abyssRef}><Abyss /></div>\n          <div ref={trenchRef}><Trench /></div>\n          <div className='oceanFloor'>\n              <img src={UpArrow} className='returnUpButton' onClick={() => executeScroll(titleRef)}/>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default Main;",{"ruleId":"84","severity":1,"message":"85","line":3,"column":24,"nodeType":"86","messageId":"87","endLine":3,"endColumn":30},{"ruleId":"84","severity":1,"message":"88","line":3,"column":32,"nodeType":"86","messageId":"87","endLine":3,"endColumn":42},{"ruleId":"84","severity":1,"message":"89","line":2,"column":20,"nodeType":"86","messageId":"87","endLine":2,"endColumn":33},{"ruleId":"84","severity":1,"message":"90","line":2,"column":35,"nodeType":"86","messageId":"87","endLine":2,"endColumn":40},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":21,"column":13,"nodeType":"97","endLine":21,"endColumn":58},{"ruleId":"84","severity":1,"message":"98","line":13,"column":12,"nodeType":"86","messageId":"87","endLine":13,"endColumn":28},{"ruleId":"84","severity":1,"message":"99","line":13,"column":30,"nodeType":"86","messageId":"87","endLine":13,"endColumn":49},{"ruleId":"95","severity":1,"message":"96","line":60,"column":13,"nodeType":"97","endLine":60,"endColumn":59},{"ruleId":"84","severity":1,"message":"100","line":6,"column":8,"nodeType":"86","messageId":"87","endLine":6,"endColumn":13},{"ruleId":"95","severity":1,"message":"96","line":22,"column":21,"nodeType":"97","endLine":22,"endColumn":65},{"ruleId":"84","severity":1,"message":"101","line":1,"column":8,"nodeType":"86","messageId":"87","endLine":1,"endColumn":13},{"ruleId":"84","severity":1,"message":"102","line":1,"column":37,"nodeType":"86","messageId":"87","endLine":1,"endColumn":43},{"ruleId":"84","severity":1,"message":"103","line":3,"column":10,"nodeType":"86","messageId":"87","endLine":3,"endColumn":21},{"ruleId":"104","severity":1,"message":"105","line":21,"column":32,"nodeType":"86","endLine":21,"endColumn":39},{"ruleId":"104","severity":1,"message":"106","line":23,"column":8,"nodeType":"107","endLine":23,"endColumn":10,"suggestions":"108"},{"ruleId":"91","replacedBy":"109"},{"ruleId":"93","replacedBy":"110"},{"ruleId":"95","severity":1,"message":"96","line":22,"column":21,"nodeType":"97","endLine":22,"endColumn":60},{"ruleId":"104","severity":1,"message":"106","line":35,"column":8,"nodeType":"107","endLine":35,"endColumn":10,"suggestions":"111"},{"ruleId":"84","severity":1,"message":"112","line":50,"column":11,"nodeType":"86","messageId":"87","endLine":50,"endColumn":23},{"ruleId":"95","severity":1,"message":"96","line":119,"column":15,"nodeType":"97","endLine":119,"endColumn":102},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'HashRouter' is defined but never used.","'BrowserRouter' is defined but never used.","'Route' is defined but never used.","no-native-reassign",["113"],"no-negated-in-lhs",["114"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'showBottleBubble' is assigned a value but never used.","'setShowBottleBubble' is assigned a value but never used.","'Floor' is defined but never used.","'React' is defined but never used.","'useRef' is defined but never used.","'useOnScreen' is defined but never used.","react-hooks/exhaustive-deps","The ref value 'ref.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'ref.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has missing dependencies: 'ref' and 'rootMargin'. Either include them or remove the dependency array.","ArrayExpression",["115"],["113"],["114"],["116"],"'titleVisible' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},{"desc":"117","fix":"119"},"Update the dependencies array to be: [ref, rootMargin]",{"range":"120","text":"121"},{"range":"122","text":"121"},[649,651],"[ref, rootMargin]",[1206,1208]]